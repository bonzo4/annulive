import { Dispatch, SetStateAction, useState } from "react";
import Button from "@/components/ui/Button";
import Select from "@/components/ui/Select";
import Input from "@/components/ui/Input";
import { generateRoadmap } from "../actions/generateRoadmap";

export interface RoadmapFormData {
  skill: string;
  timeframe: string;
  resourceTypes: string[];
}

interface RoadmapFormProps {
  isSubmitting: boolean;
  setIsSubmitting: Dispatch<SetStateAction<boolean>>;
  onRoadmapGenerated?: (roadmapContent: string) => void;
  onError?: (error: string) => void;
}

export default function RoadmapForm({
  isSubmitting,
  setIsSubmitting,
  onRoadmapGenerated,
  onError,
}: RoadmapFormProps) {
  const [formData, setFormData] = useState<RoadmapFormData>({
    skill: "",
    timeframe: "",
    resourceTypes: ["all"],
  });

  const resourceTypeOptions = [
    { value: "all", label: "All Resource Types" },
    { value: "videos", label: "Videos" },
    { value: "articles", label: "Articles" },
    { value: "books", label: "Books" },
    { value: "courses", label: "Online Courses" },
    { value: "tutorials", label: "Tutorials" },
    { value: "documentation", label: "Documentation" },
  ];

  const timeframeOptions = [
    { value: "1-week", label: "1 Week" },
    { value: "2-weeks", label: "2 Weeks" },
    { value: "1-month", label: "1 Month" },
    { value: "3-months", label: "3 Months" },
    { value: "6-months", label: "6 Months" },
    { value: "1-year", label: "1 Year" },
  ];

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!formData.skill.trim()) {
      alert("Please enter a skill to learn.");
      return;
    }

    setIsSubmitting(true);

    try {
      const result = await generateRoadmap(formData);

      if (result.ok && result.content) {
        setFormData({
          skill: "",
          timeframe: "",
          resourceTypes: ["all"],
        });

        if (onRoadmapGenerated) {
          onRoadmapGenerated(result.content);
        } else {
          alert("Roadmap created successfully!");
          console.log("Generated roadmap:", result.content);
        }
      } else {
        const errorMessage = result.error || "Unknown error";
        console.error("Error generating roadmap:", errorMessage);

        if (onError) {
          onError(errorMessage);
        } else {
          alert(`Failed to create roadmap: ${errorMessage}`);
        }
      }
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : "An unexpected error occurred";
      console.error("Unexpected error:", error);

      if (onError) {
        onError(errorMessage);
      } else {
        alert("An unexpected error occurred. Please try again.");
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleInputChange = (field: keyof RoadmapFormData, value: string) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  const handleResourceTypeChange = (value: string) => {
    setFormData((prev) => {
      if (value === "all") {
        return { ...prev, resourceTypes: ["all"] };
      }

      const currentTypes = prev.resourceTypes.filter((type) => type !== "all");

      if (currentTypes.includes(value)) {
        const newTypes = currentTypes.filter((type) => type !== value);
        return {
          ...prev,
          resourceTypes: newTypes.length > 0 ? newTypes : ["all"],
        };
      } else {
        return { ...prev, resourceTypes: [...currentTypes, value] };
      }
    });
  };

  return (
    <div className="mx-auto max-w-2xl rounded-2xl bg-white p-8 shadow-xl">
      <div className="mb-8">
        <h2 className="mb-2 text-3xl font-bold text-gray-900">
          Create Your Learning Roadmap
        </h2>
        <p className="text-gray-600">
          Tell us what you want to learn and we&apos;ll create a personalized
          roadmap for you.
        </p>
        <div className="mt-4 rounded-lg border border-yellow-200 bg-yellow-50 p-3">
          <p className="text-sm text-yellow-800">
            <strong>Disclaimer:</strong> This roadmap is generated by AI and may
            contain inaccurate information. Please verify resources and
            recommendations before following the suggested learning path.
          </p>
        </div>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        <div>
          <label
            htmlFor="skill"
            className="mb-2 block text-sm font-medium text-gray-700"
          >
            What skill do you want to learn?{" "}
            <span className="text-red-500">*</span>
          </label>
          <Input
            type="text"
            id="skill"
            value={formData.skill}
            onChange={(e) => handleInputChange("skill", e.target.value)}
            placeholder="e.g., React, Machine Learning, Photography..."
            required
          />
        </div>

        <div>
          <label
            htmlFor="timeframe"
            className="mb-2 block text-sm font-medium text-gray-700"
          >
            Learning Timeframe
          </label>
          <Select
            id="timeframe"
            value={formData.timeframe}
            onChange={(e) => handleInputChange("timeframe", e.target.value)}
            options={timeframeOptions}
            placeholder="Select a timeframe"
          />
        </div>

        <div>
          <label
            htmlFor="resourceTypes"
            className="mb-2 block text-sm font-medium text-gray-700"
          >
            Preferred Resource Types
          </label>
          <div className="space-y-2">
            {resourceTypeOptions.map((option) => (
              <label key={option.value} className="flex items-center">
                <input
                  type="checkbox"
                  id={`resourceType-${option.value}`}
                  checked={formData.resourceTypes.includes(option.value)}
                  onChange={() => handleResourceTypeChange(option.value)}
                  className="mr-2 h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">{option.label}</span>
              </label>
            ))}
          </div>
          <p className="mt-1 text-sm text-gray-500">
            Choose your preferred learning formats. You can select multiple
            types.
          </p>
        </div>

        <div className="pt-4">
          <Button
            type="submit"
            variant="primary"
            size="lg"
            disabled={isSubmitting || !formData.skill}
            className="w-full"
          >
            {isSubmitting ? (
              <>
                <div className="h-5 w-5 animate-spin rounded-full border-2 border-white border-t-transparent"></div>
                Creating Roadmap...
              </>
            ) : (
              "Create My Roadmap"
            )}
          </Button>
        </div>
      </form>
    </div>
  );
}
